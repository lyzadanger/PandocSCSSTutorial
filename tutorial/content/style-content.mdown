% From here to Cloudfour.com: Let's build stuff

# Ready to style? Good.

## Hi From SCSS

In this section, we'll be paying homage to [SCSS][scss]. I'll let their web site speak for itself:

>Sass makes CSS fun again. Sass is an extension of CSS3, adding nested rules, variables, mixins, selector inheritance, and more. It’s >translated to well-formatted, standard CSS using the command line tool or a web-framework plugin.

>Sass has two syntaxes. The new main syntax (as of Sass 3) is known as “SCSS” (for “Sassy CSS”), and is a superset of CSS3’s syntax. >This means that every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension .scss.

(In the interest of continuing your markdown education, `blockquote` or `aside`-like content looks like quoted emails, that is, each line begins with a `>`. That last code chunk looks like:

    >Sass makes CSS fun again. Sass is an extension of CSS3, adding nested rules, variables, mixins, selector inheritance, and more. It’s
    >translated to well-formatted, standard CSS using the command line tool or a web-framework plugin.
    
    >Sass has two syntaxes. The new main syntax (as of Sass 3) is known as “SCSS” (for “Sassy CSS”), and is a superset of CSS3’s syntax. 
    >This means that every valid CSS3 stylesheet is valid SCSS as well. SCSS files use the extension .scss.


) 
(You didn't think I'd forget to close that parenthesis, did you?)

## Create your first .scss file

1. `cd` to the `styles` directory.
2. Ignore the extant `tutorial` files. I bet you can guess why I created them.
3. Create a *new* file called `styles.scss`. *Note* that extension. It's not necessary to name your SCSS files anything in particular, but using that extension keeps them separate from the CSS we'll use in our HTML page.

## Variables

I want you to put the following at the top of the file:

    $cloudfour_blue: #709ad0;

That's a variable. You define it once (it does *not* have to be at the top of the file, FWIW, but it's nice, stylistically).

**Exercise:** Now I want you to go to our current (old) site and find hex values for two more colors: the green and the brown. I don't really care if they're spot on. Create two new variables called `$accent_brown` and `$accent_green`.

**Extra credit:** Can you think of why those are terrible variable names?

You can see the values I used.[^1]

### Putting the variables to work

They're lonely. They've been created, but have nowhere to show their mettle.

Try adding this to the file:

~~~~{.css}

    body {
      background-color: darken($cloudfour_blue, 50%);
      font-family: helvetica;
      color: lighten($cloudfour_blue, 38%);
    }
    h1, h2, h3, h4 {
      color: $cloudfour_blue;
    }
~~~~

(Everyone loves Helvetica!)

Lookit that! We're able to *lighten* and *darken* colors proportionally! And they're variables, to boot!

Instead of having to define ugly hex (or whatever) all over our CSS, we can define variables once and reuse! You know, like *an actual language*!

### How the sausage is made

Wait, this isn't CSS! You can't use it in a page! OK, there, Sparky. Calm down.

1. `cd` into the `styles` directory, if you're not there already.
2. Run this command: `sass styles.scss styles.css`

**OMGPEE! Out comes CSS!!!!**

### Add a nested rule

It's about to get more real. Add this to the file.

*NB: Don't edit `styles.css`. Edit `styles.scss`. Or else there be frustration.*

~~~~

    #we-make-the-mobile---web {
      p {
        margin: 0.5em;
      }
      h3 {
        color: $accent_green;
        a {
          text-decoration: none;
          color: darken($cloudfour_blue, 25%);
        }
      }
    }

~~~~

OK. Put your typing fingers down for a minute and peruse that chunk there. What the hell do you think is going on?

`#we-make-the-mobile---web` is an ID autogenerated by pandoc. It's currently assigned to the `<section>` element that contains the three sub-sections about what we do.

In my pretend world, I've decided that:

* Underlined links aren't working for me--but only inside of the section with the three things we do.
* I want the `<h3>` elements in that section to be green.
* I want to indent the paragraphs in that section by 0.5em.

In regular, workaday CSS, I'd have to create these selectors:

~~~~{.css}

#we-make-the-mobile---web p {
  margin: 0.5em; }
#we-make-the-mobile---web h3 {
  color: #c4d82d; }
#we-make-the-mobile---web h3 a {
  text-decoration: none;
  color: #305a91; }

~~~~

But why do that, when I can make it so much more readable, so much more manageable, using *nesting* in SCSS?

By the way, if you run the same command now (after saving the file) `sass styles.scss styles.css`, the chunk above is what SASS will create for you! Try it!

#### And now, for my next trick (more with nesting)

Hey, what if, for some reason, e.g. I am insane, I want the background color of the body to be light brown for folks who have a current window width of less than 600 pixels. I know, we totally get that request all the time.

**Super Challenge**: Can you add a media query such that the background color of the body element is light brown (think the accent brown, lightened by about 30%)?

Then go look at the answer.[^2]

See, you can nest *media queries*, too. How freaking awesome is that! Execute on these changes, run `sass` again on your stylesheet.

### Other damned cool stuff

**Exercise:** Go to [SCSS' and SASS' home page](http://sass-lang.com/) and scroll down to the bottom. Read the sections on *mixins* and *selector inheritance*. No need for me to re-write that concise content!

## But Wait, I need to see this in action

How are you *ever* going to prove that the background is antique poop-colored (sort of a vintage, faux turd shade) if you can't get that CSS to be used by our pandoc-generated HTML document?!

Oh, but you can, of course. Let's go [put it all together](put-together.html).


[^1]: My values for these two SCSS variables:

    `$accent_green: #c4d82d;`  
    `$accent_brown: #78562f;` 

[^2]: Your body rules should look something like:

    ~~~~

    body {
      color: darken($cloudfour_blue, 50%);
      font-family: helvetica;
      background-color: lighten($cloudfour_blue, 35%);
      @media screen and (max-width: 600px){
          background-color: lighten($accent_brown, 30%);
      }
    }
    
    ~~~~
    
[scss]:http://sass-lang.com/ 