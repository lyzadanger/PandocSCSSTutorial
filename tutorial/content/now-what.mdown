% From here to Cloudfour.com: What's the big idea?

## The big picture

Step back. Here's what we've been doing:

1. Writing content first and treating it with love and a future-friendly goal of keeping it flexible, readable and content-only.
2. Transforming. We *transform* the content (in this case from markdown to HTML) to make it appropriate for the consuming client (a web browser).
3. Extending and re-using. We're using **SCSS** to make our CSS more modular and manageable. We're adding some (albeit very rudimentary) resuable components to our pages.

## It's not for everyone

This is a very simple concept at present. What happens when we need dynamic stuff, like app-like stuff? How do we manage this? How do we work together in a system like this? How does it get deployed?

### A side note about deployment

One possibility for deployment (not my *forte*, kids, not my *raison d'etre*) is using git and git's rather handsome *hooks*.

For [the book web site](http://hf-mw.com), for example, I use git's `post-receive` hook on the web server. Back up, Lyza.

For the book web site, I added an additional `remote` to my clone of the site's git repository on my computer. Translation: I told my copy of the repository that there is another place it can push to. When I push the repository to the `remote` that is the web server (I call that origin `hfmw`), it pushes all of the repository changes to the live web server (if there are any).

On the web server, I have a shell script that takes advantage of the `post-receive` hook. Whenever a given chapter's repository is pushed to the server (OK, so, I have one repository per chapter. But anyway), after the update is done, it fires the `post-receive` script. In that script, I do some work moving files around on the file system, building downloadable ZIP files and other stuff that is kind of like the **transformation** I am performing on that content.

Theoretically we could do something similar. We write the content and the reusable components and create the templates. We commit and push to a git repository on GitHub. When we push to the git repository on some live server somewhere, some relevant git hook fires off a script or scripts that runs those pandoc commands and maybe some SASS commands. That way, we're transforming appropriately for the given environment, which in this case (I know, really, all of our cases, but can you see my point?) is a web server.

## There's still a lot to figure out

* I don't really know what deployment looks like. I'd really love input from John.
* I don't know how we should handle images for devices. What a crazy world it is on that front.
* I don't know how we want to handle routing or URLs beyond the obvious (naming files and putting them in folders).
* We'll need to get all sophisticated with our main HTML templates to take advantage of stuff. Client-side feature detection maybe. Any bells and whistles we want. Shims for IE and media queries. Stuff like that.

## The big roadblocks

Hokay, so you know how it was dead easy to download and install pandoc? How it just happened easily, quietly like Sunday morning? Welllllp, that kind of hides something underneath.

**pandoc is written in Haskell**

This is, like, the hippest language on the planet. People talk about it over cocktails at secret startups in San Francisco. It is likely the subject of tattoos. It's so beautiful and pure you can't look straight at it.

Basically, no one uses it. At least not yet.

Fortunately, it is easy to get running on Macs. It's part of the installer you get with pandoc.

But there isn't a commercial web hosting provider in the world that I know of that supports Haskell. And setting it up is no minor feat. We'd likely need root. We run the risk of bricking a box. If we want to do the transformation operations on the server—where they belong—we'd need John's help, because we gotta get Haskell running somewhere in this stack.


